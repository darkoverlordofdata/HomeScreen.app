#!/usr/bin/env python3

# https://github.com/helloSystem/Menu/issues/3


from PyQt5.QtWidgets import QApplication, QSystemTrayIcon, QMenu, QAction, QHBoxLayout, QGroupBox, QSlider, QWidget, \
    QActionGroup, QDesktopWidget, QMessageBox
from PyQt5.QtGui import QIcon, QPixmap, QCursor, QImage
from PyQt5.QtCore import Qt, QProcess, QMetaObject, QCoreApplication, QEvent, QObject, QTimer
import sys, os
import datetime
import json
import requests
from pathlib import Path

LOCAL = os.path.dirname(__file__)
METALOCK_BIN = "/usr/local/bin/metalock"
CATLOCK_BIN = "/usr/local/bin/catlock"

        
        
class HomeScreenMenu(QObject):

    def __init__(self):

        super().__init__()

        icon = QIcon(f'{LOCAL}/Resources/HomeScreen.png')
 
        self.tray = QSystemTrayIcon()
        self.tray.setIcon(icon)
        self.tray.setVisible(True)
        self.menu = QMenu()
        
        self.tray.activated.connect(self.onClicked) # Refresh each time the menu is clicked. FIXME: Does not work on right-click; why?

        self.tray.setContextMenu(self.menu)
        
        # NOTE:
        # https://forum.learnpyqt.com/t/qsystemtrayicon-example/689
        # Sneaky PyQt quirk! A reference to the actions must be kept around or the actions will be destroyed
        self.actions = []
        self.sliderWindow = None
        
        self.refreshMenu() # Initially populate the menu
        self.tray.installEventFilter(self) # FIXME: This never seems to get called, why?
        self.installEventFilter(self)  # FIXME: This never seems to get called, why?

    def eventFilter(self, obj, event):
        print("eventFilter function running") # FIXME: Why is this never called when the icon is right-clicked?
        # We need to refresh the contents of the right-click menu somehow when the user right-clicks...

    def onClicked(self, reason):
        # TODO: Is using customContextMenuRequested the proper way to do this? How?
        self.refreshMenu()
        # S = Ui_Slider()
        # self.sliderWindow = S # Need to keep a reference around so that it does not get destroyed
        # S.show()

    def refreshMenu(self):
        self.actions = []
        self.menu.clear()
        
        # Add the devices to the menu
        # Playback devices
        self.playbackGroup = QActionGroup(self.menu) # Only one of the actions added to this group can be active


        self.menu.addSeparator()

        action = QAction("Gallery")
        action.triggered.connect(self.showGallery)
        self.actions.append(action)
        self.menu.addAction(action)

        action = QAction("Preferences")
        action.triggered.connect(self.showPreferences)
        self.actions.append(action)
        self.menu.addAction(action)

        action = QAction("Download")
        action.triggered.connect(self.showDownload)
        self.actions.append(action)
        self.menu.addAction(action)

        action = QAction("About")
        action.triggered.connect(self.showAbout)
        self.actions.append(action)
        self.menu.addAction(action)

        self.menu.addSeparator()
        action = QAction("Exit")
        action.triggered.connect(self.exit)
        self.actions.append(action)
        self.menu.addAction(action)

    def exit(self, widget):
        sys.exit()

    # show cache contents
    def showGallery(self):
        pass

    # set preferences
    def showPreferences(self):
        """
        1) select metalock or catlock

        if not os.path.exists(_FIREFOX_BIN):

        """
        pass

    # download latest image cache
    def showDownload(self):

        response = requests.get("https://www.bing.com/HPImageArchive.aspx?format=js&idx=0&n=1&mkt=en-US")
        image_data = json.loads(response.text)

        image_url = image_data["images"][0]["url"]
        
        urlbase = image_data["images"][0]["urlbase"][11:] # remove /th?id=OHR.
        title = image_data["images"][0]["title"]
        copyright = image_data["images"][0]["copyright"]

        image_url = image_url.split("&")[0]
        full_image_url = "https://www.bing.com" + image_url
        img_data = requests.get(full_image_url).content

        with open(f'{LOCAL}/Resources/imagename', 'w') as f:
            f.write(urlbase)

        with open(f'{LOCAL}/Resources/gallery/{urlbase}.jpeg', 'wb') as f:
            f.write(img_data)

        with open(f'{LOCAL}/Resources/gallery/{urlbase}', 'w') as f:
            f.write(title)
            f.write('\n')
            f.write(copyright)

        width = 1368
        height = 768

        image = QImage(f'{LOCAL}/Resources/gallery/{urlbase}.jpeg', 'JPG')
        locked = QPixmap.fromImage(image).scaled(width, height) #, Qt.KeepAspectRatio)

        for i in range(image.height()):
            for k in range(image.width()):
                image.setPixelColor(k, i, image.pixelColor(k,i).darker(160))

        authorize = QPixmap.fromImage(image).scaled(width, height) #, Qt.KeepAspectRatio)

        authorize.save(f'{LOCAL}/Resources/themes/wallpaper.authorize.jpg')
        locked.save(f'{LOCAL}/Resources/themes/wallpaper.locked.jpg')
        with open(f'{LOCAL}/Resources/themes/wallpaper.description', 'w') as f:
            f.write(title)
            f.write('\n')
            f.write(copyright)

        os.system(f'launch Filer --set-wallpaper {LOCAL}/Resources/gallery/{urlbase}.jpeg')
        os.system(f'mkdir -p {LOCAL}/Pictures/HomeScreen')


# mkdir -p ${HOME}/Pictures/HomeScreen
# convert ${HOME}/GitHub/HomeScreen.app/Resources/themes/wallpaper.authorize.jpg -resize 1368x768 ${HOME}/Pictures/HomeScreen/bg.jpg
# convert ${HOME}/Pictures/HomeScreen/bg.jpg -crop 430x170+469+299 ${HOME}/Pictures/HomeScreen/box.jpg
# sudo ln -s ${HOME}/Pictures/HomeScreen /usr/local/share/metalock/themes

# convert ${HOME}/GitHub/HomeScreen.app/Resources/themes/wallpaper.locked.jpg -resize 1368x768 ${HOME}/Pictures/HomeScreen/bg.jpg


    def dbgMessage(self, txt):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Information)

        msg.setText(txt)
        msg.setInformativeText("value")
        msg.setWindowTitle("HomeScreen Debug")
        msg.setDetailedText("The details are as follows:")
        msg.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
        retval = msg.exec_()


    def showAbout(self):
        print("showDialog")
        msg = QMessageBox()
        msg.setWindowTitle("HomeScreen")
        msg.setIconPixmap(QPixmap(f'{LOCAL}/Resources/HomeScreen.png').scaledToWidth(64, Qt.SmoothTransformation))
        candidates = ["COPYRIGHT", "COPYING", "LICENSE", "license.md"]
        for candidate in candidates:
            if os.path.exists(LOCAL + "/" + candidate):
                with open(LOCAL + "/" + candidate, 'r') as file:
                    data = file.read()
                msg.setDetailedText(data)
        msg.setText("<h3>HomeScreen</h3>")
        msg.setInformativeText("Download your facorite daily desktop images for your wallpaper and lock screen.")
        msg.exec()


if __name__ == "__main__":

    # Simple singleton:
    # Ensure that only one instance of this application is running by trying to kill the other ones
    p = QProcess()
    p.setProgram("pkill")
    p.setArguments(["-f", os.path.abspath(__file__)])
    cmd = p.program() + " " + " ".join(p.arguments())
    print(cmd)
    p.start()
    p.waitForFinished()

    app = QApplication(sys.argv)
    app.setQuitOnLastWindowClosed(False)
    app.setAttribute(Qt.AA_UseHighDpiPixmaps)
    VM = HomeScreenMenu()
    sys.exit(app.exec_())
